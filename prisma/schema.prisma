generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_SHADOW_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  elo               Int           @default(1000)
  streak            Int           @default(0)
  lastStudiedAt     DateTime?
  username          String?       @unique
  bio               String?
  leaderboardOptOut Boolean       @default(false)
  accounts          Account[]
  sessions          Session[]
  lectures          Lecture[]
  masteredSubtopics UserMastery[]
  quizAttempts      QuizAttempt[]
  following         Follow[]      @relation("UserFollows")
  followedBy        Follow[]      @relation("UserFollowedBy")
}

model Lecture {
  id              String     @id @default(cuid())
  title           String
  originalContent String
  createdAt       DateTime   @default(now())
  userId          String
  starred         Boolean    @default(false)
  lastOpenedAt    DateTime?
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtopics       Subtopic[]

  @@index([userId, starred, createdAt])
  @@index([userId, starred, lastOpenedAt, createdAt], map: "Lecture_userId_starred_lastOpened_createdAt_idx")
}

model Subtopic {
  id          String         @id @default(cuid())
  order       Int
  title       String
  importance  String
  difficulty  Int
  overview    String
  explanation String?
  lectureId   String
  lecture     Lecture        @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  questions   QuizQuestion[]
  masteredBy  UserMastery[]

  @@unique([lectureId, order])
}

model QuizQuestion {
  id          String        @id @default(cuid())
  prompt      String
  options     Json
  answerIndex Int
  explanation String
  subtopicId  String
  subtopic    Subtopic      @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  attempts    QuizAttempt[]
}

model UserMastery {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  subtopicId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@unique([userId, subtopicId])
}

model QuizAttempt {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  userId        String
  questionId    String
  selectedIndex Int
  isCorrect     Boolean
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, isCorrect, createdAt])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
