This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      breakdown/
        route.ts
      quiz/
        route.ts
      summarize/
        route.ts
      upload-pdf/
        route.ts
    dashboard/
      page.tsx
    learn/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  lib/
    ai.ts
    learn-store.ts
    store.ts
.gitignore
.prettierignore
.prettierrc.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
script.sh
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/app/api/breakdown/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  const body = await req.json().catch(() => ({}));
  const content = typeof body?.content === 'string' ? body.content : '';
  const lines = content.split(/\n+/).filter(Boolean).slice(0, 5);
  return NextResponse.json({
    topic: 'Uploaded Lecture',
    subtopics: lines.length
      ? lines.map((l, i) => ({
          title: l.slice(0, 64) || `Subtopic ${i + 1}`,
          importance: (['high', 'med', 'low'] as const)[i % 3],
          difficulty: ((i % 3) + 1) as 1 | 2 | 3,
          overview: 'Placeholder overview',
        }))
      : [
          {
            title: 'Placeholder subtopic',
            importance: 'med',
            difficulty: 2,
            overview: 'Add content to generate real subtopics.',
          },
        ],
  });
}
</file>

<file path="src/app/api/quiz/route.ts">
import { NextRequest, NextResponse } from 'next/server';

type Subtopic = {
  title: string;
  importance: 'low' | 'med' | 'high';
  difficulty: 1 | 2 | 3;
  overview?: string;
};

export async function POST(req: NextRequest) {
  const body = (await req.json().catch(() => ({}))) as {
    content?: string;
    subtopics?: Subtopic[];
    num_questions?: number;
  };

  const subs = Array.isArray(body?.subtopics) ? body.subtopics : [];
  const take = Math.min(3, Math.max(1, subs.length || 3));
  const base = subs.length
    ? subs.slice(0, take)
    : Array.from({ length: take }, (_, i) => ({
        title: `Placeholder ${i + 1}`,
        importance: (['low', 'med', 'high'] as const)[i % 3],
        difficulty: (((i % 3) + 1) as 1 | 2 | 3),
      }));

  const questions = base.map((s, i) => ({
    prompt: `What best describes: ${s.title}?`,
    options: ['Definition', 'Example', 'Misconception', 'Related topic'],
    answerIndex: i % 4,
    explanation: 'Pick the option that best captures the subtopic.',
    subtopicTitle: s.title,
  }));

  return NextResponse.json({ questions });
}
</file>

<file path="src/app/api/summarize/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  const body = await req.json().catch(() => ({}));
  const content = typeof body?.content === 'string' ? body.content : '';
  const bullets = content
    ? content.split(/\.\s+/).slice(0, 5).map((b) => `• ${b}`)
    : ['• Add content to generate a summary.'];
  return NextResponse.json({ summary: bullets.join('\n') });
}
</file>

<file path="src/app/api/upload-pdf/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import pdfParse from 'pdf-parse';

export const runtime = 'nodejs';
export const maxDuration = 60;

// Guard env to prevent pdf-parse from attempting sample test file access in certain builds.
process.env.PDFJS_DISABLE_CREATE_OBJECT_URL = 'true';
process.env.PDFJS_WORKER_DISABLE = 'true';

export async function POST(req: NextRequest) {
  try {
    const contentType = req.headers.get('content-type') || '';
    if (!contentType.includes('multipart/form-data')) {
      return NextResponse.json(
        { error: 'Content-Type must be multipart/form-data' },
        { status: 400 }
      );
    }

    const form = await req.formData();
    const file = form.get('file');
    if (!file || !(file instanceof File)) {
      return NextResponse.json(
        { error: 'Missing file field "file"' },
        { status: 400 }
      );
    }
    if (!file.name.toLowerCase().endsWith('.pdf')) {
      return NextResponse.json(
        { error: 'Please upload a PDF file' },
        { status: 400 }
      );
    }

    const arrayBuffer = await file.arrayBuffer();
    // @ts-ignore
    const buffer: Buffer = Buffer.from(arrayBuffer);

    // Use direct buffer parsing; do not supply a file path or options that trigger fs reads.
    const data = await pdfParse(buffer);
    const text = (data.text || '').replace(/\s+\n/g, '\n').trim();

    if (!text) {
      return NextResponse.json(
        {
          error:
            'No extractable text found in PDF (file may be scanned images).',
        },
        { status: 422 }
      );
    }

    return NextResponse.json({
      filename: file.name,
      // @ts-ignore
      pages: data.numpages ?? null,
      content: text,
    });
  } catch (e: any) {
    console.error('UPLOAD_PDF_ERROR:', e?.stack || e?.message || e);
    return NextResponse.json(
      { error: e?.message || 'Upload failed' },
      { status: 500 }
    );
  }
}
</file>

<file path="src/app/dashboard/page.tsx">
'use client';

import { useState } from 'react';
import { useProgressStore } from '@/lib/store';

type Breakdown = {
  topic: string;
  subtopics: { title: string; importance: 'low' | 'med' | 'high'; difficulty: 1 | 2 | 3 }[];
};

export default function Dashboard() {
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [breakdown, setBreakdown] = useState<Breakdown | null>(null);
  const [summary, setSummary] = useState<string>('');
  const [quiz, setQuiz] = useState<any>(null);

  const { progress, incrementLecture, addMastery, tickStudy } =
    useProgressStore();

  const runAll = async () => {
    setLoading(true);
    setSummary('');
    setBreakdown(null);
    setQuiz(null);

    const start = Date.now();
    try {
      const bd = await fetch('/api/breakdown', { method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: input }),
      }).then((r) => r.json());

      setBreakdown(bd);

      const sm = await fetch('/api/summarize', { method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: input }),
      }).then((r) => r.json());
      setSummary(sm.summary);

      const qz = await fetch('/api/quiz', { method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: input, subtopics: bd.subtopics }),
      }).then((r) => r.json());
      setQuiz(qz);

      incrementLecture();
      addMastery(bd.subtopics.length);
    } finally {
      const minutes = Math.max(1, Math.round((Date.now() - start) / 60000));
      tickStudy(minutes);
      setLoading(false);
    }
  };

  return (
    <div className="space-y-8">
      <section>
        <h2 className="text-2xl font-semibold">Dashboard</h2>
        <p className="text-neutral-400">
          Paste lecture notes or slide text. We&apos;ll break it down, summarize
          key insights, and generate a mastery quiz.
        </p>
      </section>

      <section className="space-y-3">
        <textarea
          className="w-full min-h-[160px] rounded-md bg-neutral-900 p-3 outline-none ring-1 ring-neutral-800"
          placeholder="Paste your lecture content here..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />
        <button
          onClick={runAll}
          disabled={loading || !input.trim()}
          className="rounded-md bg-white px-4 py-2 text-black font-medium disabled:opacity-50"
        >
          {loading ? 'Processing…' : 'Analyze & Generate'}
        </button>
      </section>

      <section className="grid gap-6 md:grid-cols-2">
        <div className="rounded-lg border border-neutral-800 p-4">
          <h3 className="font-semibold mb-2">Key Insight Summary</h3>
          <div className="text-neutral-300 whitespace-pre-wrap">
            {summary || '—'}
          </div>
        </div>

        <div className="rounded-lg border border-neutral-800 p-4">
          <h3 className="font-semibold mb-2">Breakdown</h3>
          {!breakdown ? (
            <div className="text-neutral-400">—</div>
          ) : (
            <ul className="space-y-2">
              {breakdown.subtopics.map((s, i) => (
                <li
                  key={i}
                  className="flex items-center justify-between rounded-md bg-neutral-900 p-2"
                >
                  <div>
                    <div className="font-medium">{s.title}</div>
                    <div className="text-xs text-neutral-400">
                      Importance: {s.importance} • Difficulty: {s.difficulty}
                    </div>
                  </div>
                  <span
                    className="text-xs rounded bg-neutral-800 px-2 py-1 text-neutral-300"
                    title="Rank placeholder"
                  >
                    Rank: B+
                  </span>
                </li>
              ))}
            </ul>
          )}
        </div>
      </section>

      <section className="rounded-lg border border-neutral-800 p-4">
        <h3 className="font-semibold mb-2">Mastery Check</h3>
        {!quiz ? (
          <div className="text-neutral-400">—</div>
        ) : (
          <ul className="space-y-3">
            {quiz.questions.map((q: any, i: number) => (
              <li key={i} className="space-y-1">
                <div className="font-medium">{q.prompt}</div>
                <ul className="text-neutral-300 pl-4 list-disc">
                  {q.options.map((o: string, j: number) => (
                    <li key={j}>{o}</li>
                  ))}
                </ul>
                <details className="text-sm text-neutral-400">
                  <summary>Show answer</summary>
                  <div>Correct: {q.answer}</div>
                  {q.explanation && (
                    <div className="text-neutral-400">{q.explanation}</div>
                  )}
                </details>
              </li>
            ))}
          </ul>
        )}
      </section>

      <section className="grid grid-cols-2 gap-4">
        <MetricCard label="Lectures" value={progress.completedLectures} />
        <MetricCard label="Elo" value={progress.elo} />
        <MetricCard label="Mastered" value={progress.masteredSubtopics} />
        <MetricCard label="Streak" value={progress.streak} />
      </section>
    </div>
  );
}

function MetricCard({ label, value }: { label: string; value: number }) {
  return (
    <div className="rounded-lg border border-neutral-800 p-4">
      <div className="text-neutral-400 text-sm">{label}</div>
      <div className="text-2xl font-semibold">{value}</div>
    </div>
  );
}
</file>

<file path="src/app/learn/page.tsx">
'use client';

import { useState } from 'react';
import { useLearnStore, type Subtopic } from '@/lib/learn-store';

async function postJSON<T>(url: string, body: any): Promise<T> {
  const res = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(body),
  });
  if (!res.ok) {
    const err = await res.json().catch(() => ({}));
    throw new Error(err.error || `Request failed: ${res.status}`);
  }
  return res.json();
}

async function postForm<T>(url: string, form: FormData): Promise<T> {
  const res = await fetch(url, { method: 'POST', body: form });
  if (!res.ok) {
    const err = await res.json().catch(() => ({}));
    throw new Error(err.error || `Request failed: `);
  }
  return res.json();
}

export default function Learn() {
  if (typeof window !== 'undefined') {
    window.addEventListener('dragover', (e) => { e.preventDefault(); });
    window.addEventListener('drop', (e) => {
      const dt = (e as DragEvent).dataTransfer;
      const f = dt?.files?.[0];
      if (f && f.type === 'application/pdf') {
        e.preventDefault();
      }
    });
  }
  const [input, setInput] = useState('');
  const {
    topic,
    subtopics,
    unlockedIndex,
    currentIndex,
    summary,
    quiz,
    loading,
    error,
    setContent,
    setBreakdown,
    setSummary,
    setQuiz,
    setLoading,
    setError,
    selectIndex,
    unlockNext,
    resetAll,
  } = useLearnStore();

  const current = subtopics[currentIndex];

  const analyze = async () => {
    if (!input.trim()) return;
    setLoading(true);
    setError(undefined);
    setSummary('');
    setQuiz([]);
    setBreakdown('Analyzing…', []);
    setContent(input);
    try {
      const bd = await postJSON<{ topic: string; subtopics: Subtopic[] }>(
        '/api/breakdown',
        { content: input, max_subtopics: 6 }
      );
      setBreakdown(bd.topic, bd.subtopics);

      const sm = await postJSON<{ summary: string }>('/api/summarize', {
        content: input,
        max_bullets: 5,
      });
      setSummary(sm.summary);

      const qz = await postJSON<{ questions: any[] }>('/api/quiz', {
        content: input,
        subtopics: bd.subtopics,
        num_questions: Math.min(6, Math.max(3, bd.subtopics.length)),
      });
      setQuiz(qz.questions);
    } catch (e: any) {
      setError(e.message || 'Failed to analyze content.');
    } finally {
      setLoading(false);
    }
  };

  const handlePdfUpload = async (file: File) => {
    try {
      const form = new FormData();
      form.append('file', file);
      const res = await postForm<{ filename: string; pages: number | null; content: string }>(
        '/api/upload-pdf',
        form
      );
      setInput(res.content);
    } catch (e: any) {
      setError(e.message || 'Failed to upload PDF');
    }
  };

  return (
    <div className="grid gap-6 md:grid-cols-[260px_1fr]">
      <aside className="rounded-lg border border-neutral-800 p-3">
        <div className="mb-3">
          <div className="text-xs uppercase tracking-wide text-neutral-400">
            Topic
          </div>
          <div className="font-semibold">{topic}</div>
        </div>

        {subtopics.length === 0 ? (
          <div className="text-neutral-500 text-sm">No subtopics yet.</div>
        ) : (
          <ul className="space-y-1">
            {subtopics.map((s, i) => {
              const locked = i > unlockedIndex;
              const isActive = i === currentIndex;
              return (
                <li key={i}>
                  <button
                    className={
                      'w-full text-left rounded px-2 py-1 text-sm ' +
                      (locked
                        ? 'text-neutral-500 cursor-not-allowed'
                        : isActive
                        ? 'bg-neutral-800 text-white'
                        : 'text-neutral-200 hover:bg-neutral-900')
                    }
                    disabled={locked}
                    onClick={() => selectIndex(i)}
                  >
                    {s.title}
                    <span className="ml-2 text-xs text-neutral-400">
                      • {s.importance} • d{s.difficulty}
                    </span>
                  </button>
                </li>
              );
            })}
          </ul>
        )}
      </aside>

      <section className="space-y-6">
        <div className="rounded-lg border border-neutral-800 p-4 space-y-3">
          <h2 className="text-xl font-semibold">Learn Workspace</h2>
          <p className="text-neutral-400 text-sm">
            Paste your lecture content and let LearnMax break it into focused
            subtopics. Master each step to unlock the next.
          </p>
          <div
  className="group rounded-md ring-1 ring-neutral-800"
  onDragOver={(e) => { e.preventDefault(); e.stopPropagation(); }}
  onDragEnter={(e) => { e.preventDefault(); e.stopPropagation(); }}
  onDrop={(e) => {
    e.preventDefault();
    e.stopPropagation();
    const file = e.dataTransfer?.files?.[0];
    if (file && file.type === 'application/pdf') {
      handlePdfUpload(file);
    }
  }}
>
  <div className="p-0">
    <textarea
      className="w-full min-h-[120px] rounded-md bg-neutral-900 p-3 outline-none"
      placeholder="Paste lecture notes here… or drop a PDF"
      value={input}
      onChange={(e) => setInput(e.target.value)}
    />
  </div>
  <div className="px-3 pb-3 text-xs text-neutral-500">
    Tip: Drag & drop a PDF to auto-extract text.
  </div>
</div>
          <div className="flex flex-wrap gap-2"> 
  <button
    onClick={analyze}
    disabled={loading || !input.trim()}
    className="rounded-md bg-white px-4 py-2 text-black font-medium disabled:opacity-50"
  >
    {loading ? 'Analyzing…' : 'Analyze'}
  </button>
  <button
    onClick={() => { resetAll(); setInput(''); }}
    className="rounded-md border border-neutral-700 px-4 py-2 text-neutral-200"
  >
    Reset
  </button>
  <label className="inline-flex items-center gap-2 rounded-md border border-neutral-700 px-3 py-2 text-neutral-200 cursor-pointer">
    <span>Upload PDF</span>
    <input
      type="file"
      accept="application/pdf"
      className="hidden"
      onChange={(e) => {
        const f = e.target.files?.[0];
        if (f) handlePdfUpload(f);
      }}
    />
  </label>
</div>
        </div>
{error && (<div className="text-sm text-red-400" role="alert">{error}</div>)}
{error && (<div className="text-sm text-red-400">{error}</div>)}

        {subtopics.length > 0 && (
          <div className="grid gap-6 md:grid-cols-2">
            <div className="rounded-lg border border-neutral-800 p-4 space-y-4">
              <h3 className="font-semibold">Current Subtopic</h3>
              <div className="text-sm text-neutral-400">
                {current ? (
                  <>
                    <div className="font-medium text-neutral-200">
                      {current.title}
                    </div>
                    <div className="text-xs">
                      Importance: {current.importance} • Difficulty:{' '}
                      {current.difficulty}
                    </div>
                    {current.overview && (
                      <p className="mt-2 text-neutral-300 whitespace-pre-wrap">
                        {current.overview}
                      </p>
                    )}
                  </>
                ) : (
                  'Select a subtopic'
                )}
              </div>

              <div>
                <h4 className="font-medium mb-2">Key Insights</h4>
                <pre className="whitespace-pre-wrap text-neutral-300 text-sm">
                  {summary || '—'}
                </pre>
              </div>
            </div>

            <div className="rounded-lg border border-neutral-800 p-4 space-y-3">
              <h3 className="font-semibold">Mastery Check</h3>
              {quiz.length === 0 ? (
                <div className="text-neutral-500 text-sm">—</div>
              ) : (
                <QuizPanel
                  quiz={quiz}
                  onPassed={() => unlockNext()}
                  activeTitle={current?.title}
                />
              )}
            </div>
          </div>
        )}
      </section>
    </div>
  );
}

function QuizPanel({
  quiz,
  onPassed,
  activeTitle,
}: {
  quiz: {
    prompt: string;
    options: string[];
    answerIndex: number;
    explanation?: string;
    subtopicTitle?: string;
  }[];
  onPassed: () => void;
  activeTitle?: string;
}) {
  const [answers, setAnswers] = useState<number[]>([]);
  const [revealed, setRevealed] = useState(false);

  const relevant = activeTitle
    ? quiz.filter(
        (q) =>
          !q.subtopicTitle ||
          q.subtopicTitle.toLowerCase().includes(activeTitle.toLowerCase())
      )
    : quiz;

  const qs = relevant.length > 0 ? relevant : quiz.slice(0, 3);

  const setAns = (i: number, idx: number) => {
    const next = answers.slice();
    next[i] = idx;
    setAnswers(next);
  };

  const check = () => {
    setRevealed(true);
    const allCorrect =
      qs.length > 0 &&
      qs.every((q, i) => answers[i] === q.answerIndex && answers[i] !== undefined);
    if (allCorrect) {
      setTimeout(() => onPassed(), 500);
    }
  };

  return (
    <div className="space-y-3">
      <ul className="space-y-3">
        {qs.map((q, i) => (
          <li key={i} className="space-y-1">
            <div className="font-medium">{q.prompt}</div>
            <div className="grid gap-2">
              {q.options.map((o, j) => {
                const chosen = answers[i] === j;
                const correct = revealed && j === q.answerIndex;
                const wrong = revealed && chosen && j !== q.answerIndex;
                return (
                  <button
                    key={j}
                    onClick={() => setAns(i, j)}
                    className={
                      'rounded border px-3 py-2 text-left ' +
                      (correct
                        ? 'border-green-600 bg-green-950/40'
                        : wrong
                        ? 'border-red-600 bg-red-950/40'
                        : chosen
                        ? 'border-neutral-500 bg-neutral-900'
                        : 'border-neutral-800 hover:bg-neutral-900')
                    }
                  >
                    {o}
                  </button>
                );
              })}
            </div>
            {revealed && q.explanation && (
              <div className="text-sm text-neutral-400">{q.explanation}</div>
            )}
          </li>
        ))}
      </ul>
      <div className="flex gap-2">
        <button
          onClick={check}
          className="rounded-md bg-white px-4 py-2 text-black font-medium"
        >
          Check answers
        </button>
        {revealed && (
          <span className="text-sm text-neutral-400">
            Get all correct to unlock the next subtopic.
          </span>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/lib/ai.ts">
import { GoogleGenerativeAI } from '@google/generative-ai';

const apiKey = process.env.GOOGLE_API_KEY;
if (!apiKey) {
  console.warn('GOOGLE_API_KEY is not set. Set it in .env.local.');
}
const genAI = new GoogleGenerativeAI(apiKey || '');

function extractJson(text: string): string {
  const startObj = text.indexOf('{');
  const startArr = text.indexOf('[');
  const s =
    startObj === -1
      ? startArr
      : startArr === -1
      ? startObj
      : Math.min(startObj, startArr);
  if (s === -1) return text.trim();
  let depth = 0;
  let end = -1;
  for (let i = s; i < text.length; i++) {
    const ch = text[i];
    if (ch === '{' || ch === '[') depth++;
    else if (ch === '}' || ch === ']') {
      depth--;
      if (depth === 0) {
        end = i + 1;
        break;
      }
    }
  }
  return end !== -1 ? text.slice(s, end).trim() : text.trim();
}

export async function generateJSON(opts: {
  system: string;
  user: string;
}): Promise<string> {
  const model = genAI.getGenerativeModel({
    model: 'gemini-1.5-flash',
    systemInstruction:
      opts.system +
      '\nReturn ONLY minified JSON with no extra commentary or markdown.',
  });

  const result = await model.generateContent({
    contents: [{ role: 'user', parts: [{ text: opts.user }] }],
    generationConfig: {
      temperature: 0.2,
      topP: 0.9,
      maxOutputTokens: 1200,
      responseMimeType: 'application/json',
    } as any,
  });

  const text = result.response.text();
  return extractJson(text);
}
</file>

<file path="src/lib/learn-store.ts">
import { create } from 'zustand';

export type Subtopic = {
  title: string;
  importance: 'low' | 'med' | 'high';
  difficulty: number; // 1..3
  overview?: string;
};

export type Question = {
  prompt: string;
  options: string[];
  answerIndex: number;
  explanation?: string;
  subtopicTitle?: string;
};

type State = {
  topic: string;
  subtopics: Subtopic[];
  unlockedIndex: number;
  currentIndex: number;
  content: string;
  summary: string;
  quiz: Question[];
  loading: boolean;
  error?: string;
  setContent: (v: string) => void;
  setBreakdown: (topic: string, subs: Subtopic[]) => void;
  setSummary: (s: string) => void;
  setQuiz: (q: Question[]) => void;
  setLoading: (v: boolean) => void;
  setError: (e?: string) => void;
  selectIndex: (i: number) => void;
  unlockNext: () => void;
  resetAll: () => void;
};

export const useLearnStore = create<State>((set, get) => ({
  topic: 'Untitled',
  subtopics: [],
  unlockedIndex: 0,
  currentIndex: 0,
  content: '',
  summary: '',
  quiz: [],
  loading: false,
  setContent: (v) => set({ content: v }),
  setBreakdown: (topic, subs) =>
    set({
      topic,
      subtopics: subs,
      unlockedIndex: 0,
      currentIndex: 0,
    }),
  setSummary: (s) => set({ summary: s }),
  setQuiz: (q) => set({ quiz: q }),
  setLoading: (v) => set({ loading: v }),
  setError: (e) => set({ error: e }),
  selectIndex: (i) => {
    const { unlockedIndex } = get();
    if (i <= unlockedIndex) set({ currentIndex: i });
  },
  unlockNext: () => {
    const { unlockedIndex, subtopics } = get();
    if (unlockedIndex < subtopics.length - 1) {
      set({ unlockedIndex: unlockedIndex + 1, currentIndex: unlockedIndex + 1 });
    }
  },
  resetAll: () =>
    set({
      topic: 'Untitled',
      subtopics: [],
      unlockedIndex: 0,
      currentIndex: 0,
      content: '',
      summary: '',
      quiz: [],
      loading: false,
      error: undefined,
    }),
}));
</file>

<file path="src/lib/store.ts">
import { create } from 'zustand';

type Progress = {
  completedLectures: number;
  masteredSubtopics: number;
  elo: number;
  streak: number;
  lastStudyISO?: string;
};

type State = {
  progress: Progress;
  incrementLecture: () => void;
  addMastery: (n: number) => void;
  tickStudy: (minutes: number) => void;
};

export const useProgressStore = create<State>((set) => ({
  progress: {
    completedLectures: 0,
    masteredSubtopics: 0,
    elo: 1000,
    streak: 0,
  },
  incrementLecture: () =>
    set((s) => ({
      progress: {
        ...s.progress,
        completedLectures: s.progress.completedLectures + 1,
        elo: s.progress.elo + 10,
      },
    })),
  addMastery: (n: number) =>
    set((s) => ({
      progress: {
        ...s.progress,
        masteredSubtopics: s.progress.masteredSubtopics + n,
        elo: s.progress.elo + n * 5,
      },
    })),
  tickStudy: (minutes: number) =>
    set((s) => {
      const now = new Date();
      const prev = s.progress.lastStudyISO
        ? new Date(s.progress.lastStudyISO)
        : undefined;
      let streak = s.progress.streak;
      if (minutes >= 10) {
        if (!prev) {
          streak = 1;
        } else {
          const diffDays =
            Math.floor(
              (Date.UTC(
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
              ) -
                Date.UTC(
                  prev.getUTCFullYear(),
                  prev.getUTCMonth(),
                  prev.getUTCDate()
                )) /
                (1000 * 60 * 60 * 24)
            );
          if (diffDays === 1) streak = s.progress.streak + 1;
          else if (diffDays > 1) streak = 1; // reset if broken
        }
      }
      return {
        progress: {
          ...s.progress,
          streak,
          lastStudyISO: now.toISOString(),
        },
      };
    }),
}));
</file>

<file path=".prettierignore">
.next
node_modules
build
dist
coverage
.env*
</file>

<file path=".prettierrc.json">
{
  "printWidth": 80,
  "singleQuote": true,
  "semi": true,
  "trailingComma": "es5",
  "tabWidth": 2,
  "plugins": ["prettier-plugin-tailwindcss"]
}
</file>

<file path="script.sh">
#!/usr/bin/env bash
# fix-upload-pdf-pdfparse-enoent.sh
# Fixes pdf-parse ENOENT by pinning a Node-safe build and configuring it to NOT read test files.
# Also rewrites the upload route to use the Buffer-only invocation signature.
# Run from project root: bash fix-upload-pdf-pdfparse-enoent.sh

set -euo pipefail

# 1) Ensure correct pdf-parse version and install peer dependency (pdf.js-extract-free)
# Some pdf-parse builds try to load sample test files when mis-detected.
# We force a known-good version and set environment to disable tests.
if command -v pnpm >/dev/null 2>&1; then
  PM=pnpm
elif command -v yarn >/dev/null 2>&1; then
  PM=yarn
else
  PM=npm
fi

if [ "$PM" = "pnpm" ]; then
  pnpm remove pdfjs-dist >/dev/null 2>&1 || true
  pnpm add pdf-parse@1.1.1
elif [ "$PM" = "yarn" ]; then
  yarn remove pdfjs-dist >/dev/null 2>&1 || true
  yarn add pdf-parse@1.1.1
else
  npm remove pdfjs-dist >/dev/null 2>&1 || true
  npm install pdf-parse@1.1.1
fi

# 2) Rewrite upload API to use buffer-only call to pdf-parse, avoiding any fs reads
UPLOAD_API="src/app/api/upload-pdf/route.ts"
mkdir -p "$(dirname "$UPLOAD_API")"

cat > "$UPLOAD_API" <<'TS'
import { NextRequest, NextResponse } from 'next/server';
import pdfParse from 'pdf-parse';

export const runtime = 'nodejs';
export const maxDuration = 60;

// Guard env to prevent pdf-parse from attempting sample test file access in certain builds.
process.env.PDFJS_DISABLE_CREATE_OBJECT_URL = 'true';
process.env.PDFJS_WORKER_DISABLE = 'true';

export async function POST(req: NextRequest) {
  try {
    const contentType = req.headers.get('content-type') || '';
    if (!contentType.includes('multipart/form-data')) {
      return NextResponse.json(
        { error: 'Content-Type must be multipart/form-data' },
        { status: 400 }
      );
    }

    const form = await req.formData();
    const file = form.get('file');
    if (!file || !(file instanceof File)) {
      return NextResponse.json(
        { error: 'Missing file field "file"' },
        { status: 400 }
      );
    }
    if (!file.name.toLowerCase().endsWith('.pdf')) {
      return NextResponse.json(
        { error: 'Please upload a PDF file' },
        { status: 400 }
      );
    }

    const arrayBuffer = await file.arrayBuffer();
    // @ts-ignore
    const buffer: Buffer = Buffer.from(arrayBuffer);

    // Use direct buffer parsing; do not supply a file path or options that trigger fs reads.
    const data = await pdfParse(buffer);
    const text = (data.text || '').replace(/\s+\n/g, '\n').trim();

    if (!text) {
      return NextResponse.json(
        {
          error:
            'No extractable text found in PDF (file may be scanned images).',
        },
        { status: 422 }
      );
    }

    return NextResponse.json({
      filename: file.name,
      // @ts-ignore
      pages: data.numpages ?? null,
      content: text,
    });
  } catch (e: any) {
    console.error('UPLOAD_PDF_ERROR:', e?.stack || e?.message || e);
    return NextResponse.json(
      { error: e?.message || 'Upload failed' },
      { status: 500 }
    );
  }
}
TS

# 3) Remove invalid next.config.ts api.bodyParser (not supported in Next 15 app router)
NCFG="next.config.ts"
if [ -f "$NCFG" ] && grep -q "api: { bodyParser" "$NCFG"; then
  cp "$NCFG" "$NCFG.bak"
  # Remove the api.bodyParser block entirely
  perl -0777 -pe "s/api:\s*\{\s*bodyParser:\s*\{\s*sizeLimit:\s*['\"][^'\"]+['\"]\s*\}\s*\},\s*//s" -i "$NCFG"
  rm -f "$NCFG.bak"
  echo "Removed unsupported api.bodyParser from next.config.ts for Next 15."
fi

# 4) Touch learn page to trigger rebuild
LEARN="src/app/learn/page.tsx"
[ -f "$LEARN" ] && printf "\n" >> "$LEARN"

echo "Patch complete. Now:"
echo "1) Restart dev server: npm run dev"
echo "2) Upload a PDF again on /learn"
echo "3) If it still 500s, check the server console for 'UPLOAD_PDF_ERROR:' for details"
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

html, body {
  @apply bg-neutral-950 text-neutral-100;
}

.prose h1, .prose h2, .prose h3 {
  @apply font-semibold;
}

/* Minimal aesthetic refinements */
html, body {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.container-narrow {
  @apply mx-auto max-w-5xl px-4 md:px-6;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next';
import './globals.css';

export const metadata: Metadata = {
  title: 'LearnMax — An AI Study Companion',
  description: 'Mastery learning made effortless. Break complex lectures into focused steps, review key insights, and advance only when you master each concept.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className="min-h-screen antialiased">
        <div className="container-narrow">
          <header className="py-8 flex items-center justify-between border-b border-neutral-900">
            <h1 className="text-2xl font-semibold tracking-tight">LearnMax</h1>
            <nav className="text-sm text-neutral-300">
              <a className="hover:text-white" href="/">Home</a>
              <span className="mx-3">•</span>
              <a className="hover:text-white" href="/dashboard">Dashboard</a><span className="mx-3">•</span><a className="hover:text-white" href="/learn">Learn</a>
            </nav>
          </header>
          <main className="py-6">{children}</main>
          <footer className="py-12 text-sm text-neutral-500">
            Built with Next.js, Tailwind, and AI.
          </footer>
        </div>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
'use client';

import { useState } from 'react';
import { useLearnStore, type Subtopic } from '@/lib/learn-store';

async function postJSON<T>(url: string, body: any): Promise<T> {
  const res = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });
  if (!res.ok) {
    const err = await res.json().catch(() => ({}));
    throw new Error(err.error || `Request failed: ${res.status}`);
  }
  return res.json();
}

export default function Learn() {
  const [input, setInput] = useState('');
  const {
    topic,
    subtopics,
    unlockedIndex,
    currentIndex,
    summary,
    quiz,
    loading,
    error, // make sure we pick error from store
    setContent,
    setBreakdown,
    setSummary,
    setQuiz,
    setLoading,
    setError,
    selectIndex,
    unlockNext,
    resetAll,
  } = useLearnStore();

  const current = subtopics[currentIndex];

  const analyze = async () => {
    if (!input.trim()) return;
    setLoading(true);
    setError(undefined);
    setSummary('');
    setQuiz([]);
    setBreakdown('Analyzing…', []);
    setContent(input);
    try {
      const bd = await postJSON<{ topic: string; subtopics: Subtopic[] }>(
        '/api/breakdown',
        { content: input, max_subtopics: 6 }
      );
      setBreakdown(bd.topic, bd.subtopics);

      const sm = await postJSON<{ summary: string }>('/api/summarize', {
        content: input,
        max_bullets: 5,
      });
      setSummary(sm.summary);

      const qz = await postJSON<{ questions: any[] }>('/api/quiz', {
        content: input,
        subtopics: bd.subtopics,
        num_questions: Math.min(6, Math.max(3, bd.subtopics.length)),
      });
      setQuiz(qz.questions);
    } catch (e: any) {
      setError(e.message || 'Failed to analyze content.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="grid gap-6 md:grid-cols-[260px_1fr]">
      <aside className="rounded-lg border border-neutral-800 p-3">
        <div className="mb-3">
          <div className="text-xs uppercase tracking-wide text-neutral-400">
            Topic
          </div>
          <div className="font-semibold">{topic}</div>
        </div>

        {subtopics.length === 0 ? (
          <div className="text-neutral-500 text-sm">No subtopics yet.</div>
        ) : (
          <ul className="space-y-1">
            {subtopics.map((s, i) => {
              const locked = i > unlockedIndex;
              const isActive = i === currentIndex;
              return (
                <li key={i}>
                  <button
                    className={
                      'w-full text-left rounded px-2 py-1 text-sm ' +
                      (locked
                        ? 'text-neutral-500 cursor-not-allowed'
                        : isActive
                        ? 'bg-neutral-800 text-white'
                        : 'text-neutral-200 hover:bg-neutral-900')
                    }
                    disabled={locked}
                    onClick={() => selectIndex(i)}
                  >
                    {s.title}
                    <span className="ml-2 text-xs text-neutral-400">
                      • {s.importance} • d{s.difficulty}
                    </span>
                  </button>
                </li>
              );
            })}
          </ul>
        )}
      </aside>

      <section className="space-y-6">
        <div className="rounded-lg border border-neutral-800 p-4 space-y-3">
          <h2 className="text-xl font-semibold">Learn Workspace</h2>
          <p className="text-neutral-400 text-sm">
            Paste your lecture content and let LearnMax break it into focused
            subtopics. Master each step to unlock the next.
          </p>
          <textarea
            className="w-full min-h-[120px] rounded-md bg-neutral-900 p-3 outline-none ring-1 ring-neutral-800"
            placeholder="Paste lecture notes here…"
            value={input}
            onChange={(e) => setInput(e.target.value)}
          />
          <div className="flex flex-col gap-2">
            <div className="flex gap-2">
              <button
                onClick={analyze}
                disabled={loading || !input.trim()}
                className="rounded-md bg-white px-4 py-2 text-black font-medium disabled:opacity-50"
              >
                {loading ? 'Analyzing…' : 'Analyze'}
              </button>
              <button
                onClick={() => {
                  resetAll();
                  setInput('');
                }}
                className="rounded-md border border-neutral-700 px-4 py-2 text-neutral-200"
              >
                Reset
              </button>
            </div>
            {error && (
              <div className="text-sm text-red-400" role="alert">
                {error}
              </div>
            )}
          </div>
        </div>

        {subtopics.length > 0 && (
          <div className="grid gap-6 md:grid-cols-2">
            <div className="rounded-lg border border-neutral-800 p-4 space-y-4">
              <h3 className="font-semibold">Current Subtopic</h3>
              <div className="text-sm text-neutral-400">
                {current ? (
                  <>
                    <div className="font-medium text-neutral-200">
                      {current.title}
                    </div>
                    <div className="text-xs">
                      Importance: {current.importance} • Difficulty:{' '}
                      {current.difficulty}
                    </div>
                    {current.overview && (
                      <p className="mt-2 text-neutral-300 whitespace-pre-wrap">
                        {current.overview}
                      </p>
                    )}
                  </>
                ) : (
                  'Select a subtopic'
                )}
              </div>

              <div>
                <h4 className="font-medium mb-2">Key Insights</h4>
                <pre className="whitespace-pre-wrap text-neutral-300 text-sm">
                  {summary || '—'}
                </pre>
              </div>
            </div>

            <div className="rounded-lg border border-neutral-800 p-4 space-y-3">
              <h3 className="font-semibold">Mastery Check</h3>
              {quiz.length === 0 ? (
                <div className="text-neutral-500 text-sm">—</div>
              ) : (
                <QuizPanel
                  quiz={quiz}
                  onPassed={() => unlockNext()}
                  activeTitle={current?.title}
                />
              )}
            </div>
          </div>
        )}
      </section>
    </div>
  );
}

function QuizPanel({
  quiz,
  onPassed,
  activeTitle,
}: {
  quiz: {
    prompt: string;
    options: string[];
    answerIndex: number;
    explanation?: string;
    subtopicTitle?: string;
  }[];
  onPassed: () => void;
  activeTitle?: string;
}) {
  const [answers, setAnswers] = useState<number[]>([]);
  const [revealed, setRevealed] = useState(false);

  const relevant = activeTitle
    ? quiz.filter(
        (q) =>
          !q.subtopicTitle ||
          q.subtopicTitle.toLowerCase().includes(activeTitle.toLowerCase())
      )
    : quiz;

  const qs = relevant.length > 0 ? relevant : quiz.slice(0, 3);

  const setAns = (i: number, idx: number) => {
    const next = answers.slice();
    next[i] = idx;
    setAnswers(next);
  };

  const check = () => {
    setRevealed(true);
    const allCorrect =
      qs.length > 0 &&
      qs.every((q, i) => answers[i] === q.answerIndex && answers[i] !== undefined);
    if (allCorrect) {
      setTimeout(() => onPassed(), 500);
    }
  };

  return (
    <div className="space-y-3">
      <ul className="space-y-3">
        {qs.map((q, i) => (
          <li key={i} className="space-y-1">
            <div className="font-medium">{q.prompt}</div>
            <div className="grid gap-2">
              {q.options.map((o, j) => {
                const chosen = answers[i] === j;
                const correct = revealed && j === q.answerIndex;
                const wrong = revealed && chosen && j !== q.answerIndex;
                return (
                  <button
                    key={j}
                    onClick={() => setAns(i, j)}
                    className={
                      'rounded border px-3 py-2 text-left ' +
                      (correct
                        ? 'border-green-600 bg-green-950/40'
                        : wrong
                        ? 'border-red-600 bg-red-950/40'
                        : chosen
                        ? 'border-neutral-500 bg-neutral-900'
                        : 'border-neutral-800 hover:bg-neutral-900')
                    }
                  >
                    {o}
                  </button>
                );
              })}
            </div>
            {revealed && q.explanation && (
              <div className="text-sm text-neutral-400">{q.explanation}</div>
            )}
          </li>
        ))}
      </ul>
      <div className="flex gap-2">
        <button
          onClick={check}
          className="rounded-md bg-white px-4 py-2 text-black font-medium"
        >
          Check answers
        </button>
        {revealed && (
          <span className="text-sm text-neutral-400">
            Get all correct to unlock the next subtopic.
          </span>
        )}
      </div>
    </div>
  );
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  
  /* config options here */
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "learnmax",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "@hookform/resolvers": "^5.2.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.12",
    "next": "15.4.5",
    "pdf-parse": "1.1.1",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-hook-form": "^7.62.0",
    "zod": "^4.0.15",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.5",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
