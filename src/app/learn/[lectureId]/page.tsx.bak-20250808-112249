import prisma from '@/lib/prisma';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { redirect, notFound } from 'next/navigation';
import { isSessionWithUser } from '@/lib/session-utils';
import LearnView from '@/components/LearnView';

export default async function LearnPage({ params }: { params: Promise<{ lectureId: string }> }) {
  const session = await getServerSession(authOptions);
  if (!isSessionWithUser(session)) {
    redirect('/api/auth/signin');
  }
  const userId = session.user.id;
  const { lectureId } = await params;

  // Fetch the lecture + subtopics + questions + user's mastery
  const lecture = await prisma.lecture.findFirst({
    where: { id: lectureId, userId },
    include: {
      subtopics: {
        orderBy: { order: 'asc' },
        include: {
          questions: true,
          masteredBy: { where: { userId } },
        },
      },
    },
  });

  if (!lecture) {
    notFound();
  }

  const initial = {
    id: lecture.id,
    title: lecture.title,
    originalContent: lecture.originalContent,
    subtopics: lecture.subtopics.map((s) => ({
      id: s.id,
      order: s.order,
      title: s.title,
      importance: s.importance,
      difficulty: s.difficulty,
      overview: s.overview || '',
      explanation: s.explanation || '',
      mastered: (s.masteredBy?.length ?? 0) > 0,
      questions: s.questions.map((q) => ({
        id: q.id,
        prompt: q.prompt,
        options: (q.options as unknown as string[]) || [],
        answerIndex: q.answerIndex,
        explanation: q.explanation,
      })),
    })),
  };

  return (
    <div className="container-wide">
      <LearnView initial={initial} />
    </div>
  );
}
