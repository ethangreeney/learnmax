import { NextRequest, NextResponse } from 'next/server';
import { generateJSON } from '@/lib/ai';

export type ExplanationStyle = 'default' | 'simplified' | 'detailed' | 'example';

export async function POST(req: NextRequest) {
  try {
    const { content, subtopicTitle, style = 'default' } = await req.json() as { content: string, subtopicTitle: string, style?: ExplanationStyle };

    if (!content || !subtopicTitle) {
      return NextResponse.json({ error: 'Content or a subtopic title is required.' }, { status: 400 });
    }

    let styleInstruction = '';
    switch (style) {
      case 'simplified':
        styleInstruction = 'Explain it in very simple terms, as if for a complete beginner. Use analogies and avoid jargon.';
        break;
      case 'detailed':
        styleInstruction = 'Provide a more detailed, in-depth explanation suitable for a university-level student. Cover nuances and complexities.';
        break;
      case 'example':
        styleInstruction = 'Focus on providing a concrete, real-world example of the concept in action. Keep the theory brief and emphasize the practical application.';
        break;
      default:
        styleInstruction = 'Provide a clear and comprehensive explanation of the core concept.';
        break;
    }

    const prompt = `
      You are a world-class educator creating a study guide.
      Your task is to explain the concept of "${subtopicTitle}".

      **Instruction:** ${styleInstruction}

      **CRITICAL FORMATTING RULES:**
      - Your entire output MUST be a single JSON object with one key: "explanation".
      - The "explanation" value must be a string containing well-structured, readable Markdown.
      - **Paragraphs MUST be separated by a blank line.** This is essential for readability.
      - **Headings**: Use \`###\` for main headings and \`####\` for sub-headings.
      - **Lists**: Use bullet points ('*') for all lists of concepts, definitions, or key points.
      - **Code**: Use inline backticks (\`code\`) for technical terms. For multi-line code snippets, you MUST use triple backticks (\`\`\`c).

      ---
      **A GOOD EXAMPLE of the required output format:**

      ### Introduction to xv6

      * **Definition**: A modern re-implementation of the Unix V6 operating system, created by MIT for educational purposes.
      * **Platforms**: Supports both Intel x86 and RISC-V processors.

      This operating system provides a classic monolithic kernel structure, which is excellent for teaching fundamental OS concepts.

      ### Core Components

      #### Process Control Block (\`struct proc\`)
      This is the most important data structure for process management in xv6. It contains all essential per-process state.

      \`\`\`c
      // A simplified view from proc.h
      struct proc {
        struct spinlock lock;   // Protects this structure
        enum procstate state;   // Process state (e.g., UNUSED, RUNNING)
        int pid;                // Process ID
        struct proc *parent;    // Parent process
        uint64 kstack;          // Virtual address of kernel stack
      };
      \`\`\`
      ---

      Now, using the full lecture text below for context, generate the explanation by strictly following all the rules and matching the style of the good example.

      **LECTURE TEXT:**
      ${content}
    `;

    const aiResponse = await generateJSON(prompt);
    return NextResponse.json(aiResponse);

  } catch (error: any) {
    console.error("Error in explain API:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
