import { NextRequest, NextResponse } from 'next/server';
import pdfParse from 'pdf-parse';

// Route config to allow large PDFs (adjust size as needed)
export const maxDuration = 60;

export const runtime = 'nodejs';
export const maxDuration = 60;

export async function POST(req: NextRequest) {
  try {
    const contentType = req.headers.get('content-type') || '';
    if (!contentType.includes('multipart/form-data')) {
      return NextResponse.json(
        { error: 'Content-Type must be multipart/form-data' },
        { status: 400 }
      );
    }

    const form = await req.formData();
    const file = form.get('file');

    if (!file || !(file instanceof File)) {
      return NextResponse.json({ error: 'Missing file field "file"' }, { status: 400 });
    }
    if (!file.name.toLowerCase().endsWith('.pdf')) {
      return NextResponse.json({ error: 'Please upload a PDF file' }, { status: 400 });
    }

    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    const data = await pdfParse(buffer).catch((e: any) => {
      throw new Error(e?.message || 'Failed to parse PDF');
    });

    const text = (data.text || '').trim();
    if (!text) {
      return NextResponse.json(
        { error: 'No extractable text found in PDF (it may be scanned images).' },
        { status: 422 }
      );
    }

    // You could also return metadata like numpages, info, etc.
    return NextResponse.json({
      filename: file.name,
      pages: data.numpages || null,
      content: text,
    });
  } catch (e: any) {
    console.error('UPLOAD_PDF_ERROR:', e?.stack || e?.message || e);
    return NextResponse.json(
      { error: e?.message || 'Upload failed' },
      { status: 500 }
    );
  }
}


