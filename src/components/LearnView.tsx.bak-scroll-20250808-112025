'use client';

import { useMemo, useState, useEffect, useCallback, useRef } from 'react';
import { useStore } from 'zustand';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import ChatPanel from '@/components/ChatPanel';
import {
  deriveUnlockedIndex,
  type LearnLecture,
  type LearnSubtopic,
  type QuizQuestion,
} from '@/lib/shared/learn-types';
import { createLearnUIStore } from '@/lib/client/learn-ui-store';
import { renameLecture } from '@/lib/client/rename-lecture';

export default function LearnView({ initial }: { initial: LearnLecture }) {
  // Initialize UI-only store
  const initialUnlocked = deriveUnlockedIndex(initial.subtopics);
  const storeRef = useRef(
    createLearnUIStore({
      currentIndex: initialUnlocked,
      unlockedIndex: initialUnlocked,
    })
  );
  const ui = storeRef.current;

  // Subscribe to the store so UI re-renders on changes
  const currentIndex = useStore(ui, (st) => st.currentIndex);
  const unlockedIndex = useStore(ui, (st) => st.unlockedIndex);
  const currentSubtopic = initial.subtopics[currentIndex];

  // Local title editing state
  const [title, setTitle] = useState(initial.title);
  const [isSavingTitle, setIsSavingTitle] = useState(false);
  const [saveMsg, setSaveMsg] = useState<string | null>(null);

  // Explanations cache per subtopic
  const [explanations, setExplanations] = useState<Record<string, string>>(() =>
    Object.fromEntries(
      initial.subtopics.map((s) => [s.id, s.explanation || ''])
    )
  );

  const canSelect = (i: number) => i <= unlockedIndex;

  useEffect(() => {
    const u = deriveUnlockedIndex(initial.subtopics);
    ui.setState((s) => ({
      ...s,
      unlockedIndex: Math.max(u, s.unlockedIndex),
      currentIndex: Math.max(
        0,
        Math.min(s.currentIndex, initial.subtopics.length - 1)
      ),
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initial.subtopics.map((s) => s.mastered).join('|')]);

  const fetchExplanation = useCallback(
    async (
      style: 'default' | 'simplified' | 'detailed' | 'example' = 'default'
    ) => {
      const s = currentSubtopic;
      if (!s) return;
      setExplanations((e) => ({ ...e, [s.id]: 'Loading...' }));
      try {
        const res = await fetch('/api/explain-db', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ subtopicId: s.id, style }),
        });
        if (!res.ok) {
          const e = await res.json().catch(() => ({}));
          throw new Error(e.error || `HTTP ${res.status}`);
        }
        const data = (await res.json()) as { explanation: string };
        setExplanations((e) => ({ ...e, [s.id]: data.explanation }));
      } catch (e: any) {
        setExplanations((ex) => ({
          ...ex,
          [s.id]: 'Could not generate explanation. ' + e.message,
        }));
      }
    },
    [currentSubtopic]
  );

  useEffect(() => {
    const s = currentSubtopic;
    if (s && !explanations[s.id]) {
      fetchExplanation('default');
    }
  }, [currentSubtopic, explanations, fetchExplanation]);

  const handleRename = async () => {
    if (!title.trim() || title.trim().length < 3) {
      setSaveMsg('Title must be at least 3 characters.');
      return;
    }
    try {
      setIsSavingTitle(true);
      setSaveMsg(null);
      const res = await renameLecture(initial.id, title.trim());
      setSaveMsg('Lecture title saved.');
    } catch (e: any) {
      setSaveMsg(e.message || 'Failed to save title.');
    } finally {
      setIsSavingTitle(false);
      setTimeout(() => setSaveMsg(null), 2500);
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-10 xl:gap-12 px-2 md:px-4">
      {/* Left: Outline */}
      <aside className="space-y-5 self-start rounded-lg border border-neutral-800 p-6 lg:p-7 xl:p-8 lg:col-span-3">
        <h2 className="text-xl font-semibold">Lecture</h2>

        <div className="flex flex-wrap items-center gap-3 sm:flex-nowrap">
          <input
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full rounded-md bg-neutral-900 px-3 py-2 ring-1 ring-neutral-700 outline-none"
            aria-label="Lecture title"
          />
          {!(revealed && allCorrect) && (
<button
            onClick={async () => {
              const newTitle = title.trim();
              if (!newTitle || newTitle.length < 3) {
                setSaveMsg('Title must be at least 3 characters.');
                return;
              }
              try {
                setIsSavingTitle(true);
                setSaveMsg(null);
                if (newTitle !== initial.title) {
                  await renameLecture(initial.id, newTitle);
                }
                setSaveMsg('Saved!');
              } catch (e: any) {
                setSaveMsg(e.message || 'Failed to save.');
              } finally {
                setIsSavingTitle(false);
                setTimeout(() => setSaveMsg(null), 2000);
              }
            }}
            disabled={isSavingTitle || title.trim().length < 3}
            className="mt-2 rounded-md bg-white px-4 py-2 text-sm font-medium whitespace-nowrap text-black disabled:opacity-50 sm:mt-0 sm:ml-2"
          >
            {isSavingTitle ? 'Saving...' : 'Save'}
          </button>
        </div>
        {saveMsg && <div className="text-xs text-neutral-400">{saveMsg}</div>}

        <div className="mt-4 mb-2">
          <div className="text-sm text-neutral-400 uppercase">Title</div>
          <div className="text-lg font-semibold">{title}</div>
        </div>

        <ul className="space-y-1">
          {initial.subtopics.map((s, i) => (
            <li key={s.id}>
              <button
                onClick={() => canSelect(i) && ui.setState({ currentIndex: i })}
                disabled={!canSelect(i)}
                className={`w-full rounded-md px-4 py-3.5 text-left text-sm leading-snug transition-colors ${
                  i > unlockedIndex
                    ? 'text-neutral-600'
                    : i === currentIndex
                      ? 'bg-neutral-800 font-semibold text-white'
                      : 'text-neutral-300 hover:bg-neutral-900'
                }`}
              >
                {i + 1}. {s.title}
              </button>
            </li>
          ))}
        </ul>
      </aside>

      {/* Center: Explanation + Quiz */}
      <main className="lg:col-span-6">
        {currentSubtopic ? (
          <div className="space-y-8">
            <div className="rounded-lg border border-neutral-800 bg-neutral-900/50 p-6 md:p-8 xl:p-10">
              <h3 className="text-3xl font-bold tracking-tight">
                {currentSubtopic.title}
              </h3>
              <div className="mt-2 flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-neutral-400">
                <span>Importance: {currentSubtopic.importance}</span>{' '}
                <span>â€¢</span>{' '}
                <span>Difficulty: {currentSubtopic.difficulty}</span>
              </div>
              <div className="mt-6 flex items-center gap-2 border-t border-neutral-800/50 pt-4">
                <span className="text-sm font-medium text-neutral-400">
                  Style:
                </span>
                <button
                  onClick={() => fetchExplanation('default')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Default
                </button>
                <button
                  onClick={() => fetchExplanation('simplified')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Simplified
                </button>
                <button
                  onClick={() => fetchExplanation('detailed')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Detailed
                </button>
                <button
                  onClick={() => fetchExplanation('example')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Example
                </button>
              </div>
              <hr className="my-6 border-neutral-800" />
              <div className="markdown">
                <ReactMarkdown remarkPlugins={[remarkGfm]}>
                  {explanations[currentSubtopic.id] || 'Loading...'}
                </ReactMarkdown>
              </div>
            </div>

            <div className="rounded-lg border border-neutral-800 bg-neutral-900/50 p-6 md:p-8 xl:p-10">
              <h3 className="mb-6 text-2xl font-bold tracking-tight">
                Mastery Check
              </h3>
              <QuizPanel
                key={currentSubtopic.id}
                subtopicTitle={currentSubtopic.title}
                questions={currentSubtopic.questions}
                onPassed={async () => {
                  // Advance optimistically
                  const idx = currentIndex;
                  const next = Math.min(idx + 1, initial.subtopics.length - 1);
                  ui.setState({
                    currentIndex: next,
                    unlockedIndex: Math.max(unlockedIndex, next),
                  });

                  // Persist mastery in the background (best-effort)
                  try {
                    const res = await fetch('/api/mastery', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ subtopicId: currentSubtopic.id }),
                    });
                    // No blocking if it fails; just log (dev)
                    if (!res.ok) {
                      try { const e = await res.json(); console.warn('mastery persist failed:', e); } catch {}
                    }
                  } catch (e) {
                    console.warn('mastery persist error:', (e && e.message) || e);
                  }
                }}
              />
            </div>
          </div>
        ) : (
          <div className="flex h-full min-h-[60vh] items-center justify-center rounded-lg border-2 border-dashed border-neutral-800 text-neutral-500">
            <p>Select a subtopic to begin</p>
          </div>
        )}
      </main>

      {/* Right: AI Tutor */}
      <aside className="sticky top-24 h-[calc(100vh-8rem)] self-start lg:col-span-3">
        <ChatPanel documentContent={initial.originalContent} />
      </aside>
    </div>
  );
}

function QuizPanel({
  subtopicTitle,
  questions,
  onPassed,
}: {
  subtopicTitle: string;
  questions: QuizQuestion[];
  onPassed: () => void;
}) {
  // Local working set of questions (so we can inject a new one on demand)
  const [items, setItems] = useState<QuizQuestion[]>(() => questions || []);
  const [answers, setAnswers] = useState<number[]>([]);
  const [revealed, setRevealed] = useState(false);
  const [checkedAt, setCheckedAt] = useState(0); // bump to force explanation recompute after each check
  const [loadingAnother, setLoadingAnother] = useState(false);

  // Ensure local items follow prop when subtopic changes
  useEffect(() => {
    setItems(questions || []);
    setAnswers([]);
    setRevealed(false);
    setCheckedAt(0);
  }, [questions.map((q) => q.id).join('|')]);

  const setAns = (qIndex: number, ansIndex: number) => {
    const next = [...answers];
    next[qIndex] = ansIndex;
    setAnswers(next);
  };

  const allCorrect =
    items &&
    items.length > 0 &&
    items.every((q, i) => answers[i] === q.answerIndex);

  const check = () => {
    setRevealed(true);
    setCheckedAt((n) => n + 1);
  };

  const tryAgain = () => {
    setRevealed(false);
  };

  // Fetch a brand-new question for this subtopic
  const askAnother = async () => {
    setLoadingAnother(true);
    try {
      const res = await fetch('/api/quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ subtopics: [{ title: subtopicTitle }] }),
      });
      if (!res.ok) {
        const e = await res.json().catch(() => ({}));
        throw new Error(e.error || `HTTP ${res.status}`);
      }
      const data = (await res.json()) as {
        questions: Array<{
          prompt: string;
          options: string[];
          answerIndex: number;
          explanation: string;
        }>;
      };
      const q = data.questions?.[0];
      if (!q) throw new Error('No question returned');

      const newQ: QuizQuestion = {
        id:
          typeof crypto !== 'undefined' && 'randomUUID' in crypto
            ? (crypto as any).randomUUID()
            : `q-${Date.now()}`,
        prompt: q.prompt,
        options: q.options,
        answerIndex: q.answerIndex,
        explanation: q.explanation,
      };

      setItems([newQ]);
      setAnswers([]);
      setRevealed(false);
      setCheckedAt((n) => n + 1);
    } catch {
      // Fallback: synthesize a quick variant of the first question
      if (items && items.length > 0) {
        const base = items[0];
        const rotatedOptions = [...base.options];
        rotatedOptions.push(rotatedOptions.shift() as string);
        const newAnswer =
          (base.answerIndex - 1 + rotatedOptions.length) %
          rotatedOptions.length;

        const variant: QuizQuestion = {
          ...base,
          id: `${base.id}-v${Date.now()}`,
          prompt: `${base.prompt} (Variant)`,
          options: rotatedOptions,
          answerIndex: newAnswer,
          explanation: base.explanation,
        };

        setItems([variant]);
        setAnswers([]);
        setRevealed(false);
        setCheckedAt((n) => n + 1);
      }
    } finally {
      setLoadingAnother(false);
    }
  };

  if (!items || items.length === 0) {
    return (
      <p className="text-sm text-neutral-400">
        No quiz questions for this subtopic.
      </p>
    );
  }

  return (
    <div className="space-y-4">
      <ul className="space-y-6">
        {items.map((q, i) => {
          const selected = answers[i];
          const explain = revealed ? q.explanation : '';
          return (
            <li key={q.id} className="space-y-3">
              <div className="font-medium text-neutral-200">{q.prompt}</div>
              <div className="grid gap-2">
                {q.options.map((o, j) => {
                  const isSelected = selected === j;
                  const isCorrect = revealed && j === q.answerIndex;
                  const isIncorrect =
                    revealed && isSelected && j !== q.answerIndex;
                  const buttonClass = `rounded-md border p-3 text-left transition-all text-sm ${
                    isCorrect
                      ? 'border-green-500 bg-green-900/30'
                      : isIncorrect
                        ? 'border-red-500 bg-red-900/30'
                        : isSelected
                          ? 'border-blue-500 bg-blue-900/20'
                          : 'border-neutral-700 hover:bg-neutral-800'
                  }`;
                  return (
                    <button
                      key={j}
                      onClick={() => setAns(i, j)}
                      className={buttonClass}
                      disabled={revealed && allCorrect}
                    >
                      {o}
                    </button>
                  );
                })}
              </div>
              {revealed && explain && (
                <div className="mt-4 border-t border-neutral-800 pt-3 text-sm text-neutral-400">
                  {explain}
                </div>
              )}
            </li>
          );
        })}
      </ul>

      <div className="flex flex-wrap items-center gap-4 pt-4">
        <button
          onClick={check}
          disabled={items.length === 0}
          className="rounded-md bg-white px-5 py-2 font-semibold text-black disabled:opacity-50"
        >
          {revealed ? 'Recheck' : 'Check Answer'}
        </button>
)}

        {revealed && allCorrect && (
          <>
            <button
              onClick={askAnother}
              disabled={loadingAnother}
              className="rounded-md border border-neutral-600 px-4 py-2 text-sm hover:bg-neutral-900 disabled:opacity-50"
            >
              {loadingAnother ? 'Generatingâ€¦' : 'Ask me another question'}
            </button>
            <button
              onClick={onPassed}
              className="rounded-md bg-green-600 px-4 py-2 text-sm font-semibold text-white hover:bg-green-500"
            >
              Go to next subtopic
            </button>
          </>
        )}

        {revealed && !allCorrect && (
          <button
            onClick={tryAgain}
            className="rounded-md border border-neutral-600 px-4 py-2 text-sm hover:bg-neutral-900"
          >
            Try Again
          </button>
        )}
      </div>
    </div>
  );
}
