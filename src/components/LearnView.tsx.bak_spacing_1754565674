'use client';

import { useMemo, useState, useEffect, useCallback, useRef } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import ChatPanel from '@/components/ChatPanel';
import {
  deriveUnlockedIndex,
  type LearnLecture,
  type LearnSubtopic,
  type QuizQuestion,
} from '@/lib/shared/learn-types';
import { createLearnUIStore } from '@/lib/client/learn-ui-store';
import { renameLecture } from '@/lib/client/rename-lecture';

export default function LearnView({ initial }: { initial: LearnLecture }) {
  // Initialize UI-only store
  const initialUnlocked = deriveUnlockedIndex(initial.subtopics);
  const storeRef = useRef(
    createLearnUIStore({
      currentIndex: initialUnlocked,
      unlockedIndex: initialUnlocked,
    })
  );
  const ui = storeRef.current;

  const currentSubtopic = initial.subtopics[ui.getState().currentIndex];

  // Local title editing state
  const [title, setTitle] = useState(initial.title);
  const [isSavingTitle, setIsSavingTitle] = useState(false);
  const [saveMsg, setSaveMsg] = useState<string | null>(null);

  // "Saved to Dashboard" is inherent once lecture exists in DB; we just expose a button for UX
  const [savedHint, setSavedHint] = useState<string | null>(null);

  // Explanations cache per subtopic
  const [explanations, setExplanations] = useState<Record<string, string>>(() =>
    Object.fromEntries(
      initial.subtopics.map((s) => [s.id, s.explanation || ''])
    )
  );

  const canSelect = (i: number) => i <= ui.getState().unlockedIndex;

  useEffect(() => {
    const u = deriveUnlockedIndex(initial.subtopics);
    ui.setState((s) => ({
      ...s,
      unlockedIndex: Math.max(u, s.unlockedIndex),
      currentIndex: Math.max(
        0,
        Math.min(s.currentIndex, initial.subtopics.length - 1)
      ),
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initial.subtopics.map((s) => s.mastered).join('|')]);

  const fetchExplanation = useCallback(
    async (
      style: 'default' | 'simplified' | 'detailed' | 'example' = 'default'
    ) => {
      const s = currentSubtopic;
      if (!s) return;
      setExplanations((e) => ({ ...e, [s.id]: 'Loading...' }));
      try {
        const res = await fetch('/api/explain-db', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ subtopicId: s.id, style }),
        });
        if (!res.ok) {
          const e = await res.json().catch(() => ({}));
          throw new Error(e.error || `HTTP ${res.status}`);
        }
        const data = (await res.json()) as { explanation: string };
        setExplanations((e) => ({ ...e, [s.id]: data.explanation }));
      } catch (e: any) {
        setExplanations((ex) => ({
          ...ex,
          [s.id]: 'Could not generate explanation. ' + e.message,
        }));
      }
    },
    [currentSubtopic]
  );

  useEffect(() => {
    const s = currentSubtopic;
    if (s && !explanations[s.id]) {
      fetchExplanation('default');
    }
  }, [currentSubtopic, explanations, fetchExplanation]);

  const handleRename = async () => {
    if (!title.trim() || title.trim().length < 3) {
      setSaveMsg('Title must be at least 3 characters.');
      return;
    }
    try {
      setIsSavingTitle(true);
      setSaveMsg(null);
      const res = await renameLecture(initial.id, title.trim());
      setSaveMsg('Lecture title saved.');
    } catch (e: any) {
      setSaveMsg(e.message || 'Failed to save title.');
    } finally {
      setIsSavingTitle(false);
      setTimeout(() => setSaveMsg(null), 2500);
    }
  };

  const handleSaveToDashboard = async () => {
    // The lecture already exists in DB; we simply give user feedback and a quick link.
    setSavedHint('Saved! You can access this lecture on your Dashboard.');
    setTimeout(() => setSavedHint(null), 2500);
  };

  return (
    <div className="grid grid-cols-1 gap-8 px-4 lg:grid-cols-10">
      {/* Left: Outline */}
      <aside className="space-y-4 self-start rounded-lg border border-neutral-800 p-4 lg:col-span-2">
        <h2 className="text-xl font-semibold">Lecture</h2>

        {/* Rename row */}
        <div className="flex flex-wrap items-center gap-2">
          <input
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full rounded-md bg-neutral-900 px-3 py-2 ring-1 ring-neutral-700 outline-none"
            aria-label="Lecture title"
          />
          <button
            onClick={handleRename}
            disabled={isSavingTitle || title.trim().length < 3}
            className="rounded-md bg-white px-3 py-2 text-sm font-medium whitespace-nowrap text-black disabled:opacity-50"
          >
            {isSavingTitle ? 'Saving...' : 'Save'}
          </button>
        </div>
        {saveMsg && <div className="text-xs text-neutral-400">{saveMsg}</div>}

        {/* Save to Dashboard */}
        <button
          onClick={handleSaveToDashboard}
          className="mt-2 w-full rounded-md border border-neutral-700 px-3 py-2 text-sm hover:bg-neutral-900"
          title="This lecture is stored in your account; click for confirmation."
        >
          Save to Dashboard
        </button>
        {savedHint && <div className="text-xs text-green-400">{savedHint}</div>}

        <div className="mb-2">
          <div className="text-sm text-neutral-400 uppercase">Title</div>
          <div className="text-lg font-semibold">{title}</div>
        </div>

        <ul className="space-y-1">
          {initial.subtopics.map((s, i) => (
            <li key={s.id}>
              <button
                onClick={() => canSelect(i) && ui.setState({ currentIndex: i })}
                disabled={!canSelect(i)}
                className={`w-full rounded-md px-3 py-2.5 text-left text-sm leading-snug transition-colors ${
                  i > ui.getState().unlockedIndex
                    ? 'text-neutral-600'
                    : i === ui.getState().currentIndex
                      ? 'bg-neutral-800 font-semibold text-white'
                      : 'text-neutral-300 hover:bg-neutral-900'
                }`}
              >
                {i + 1}. {s.title}
              </button>
            </li>
          ))}
        </ul>
      </aside>

      {/* Center: Explanation + Quiz */}
      <main className="lg:col-span-5">
        {currentSubtopic ? (
          <div className="space-y-8">
            <div className="rounded-lg border border-neutral-800 bg-neutral-900/50 p-6 md:p-8">
              <h3 className="text-3xl font-bold tracking-tight">
                {currentSubtopic.title}
              </h3>
              <div className="mt-2 flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-neutral-400">
                <span>Importance: {currentSubtopic.importance}</span>{' '}
                <span>â€¢</span>{' '}
                <span>Difficulty: {currentSubtopic.difficulty}</span>
              </div>
              <div className="mt-6 flex items-center gap-2 border-t border-neutral-800/50 pt-4">
                <span className="text-sm font-medium text-neutral-400">
                  Style:
                </span>
                <button
                  onClick={() => fetchExplanation('default')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Default
                </button>
                <button
                  onClick={() => fetchExplanation('simplified')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Simplified
                </button>
                <button
                  onClick={() => fetchExplanation('detailed')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Detailed
                </button>
                <button
                  onClick={() => fetchExplanation('example')}
                  className="rounded-md bg-neutral-800 px-3 py-1 text-sm hover:bg-neutral-700"
                >
                  Example
                </button>
              </div>
              <hr className="my-6 border-neutral-800" />
              <div className="markdown">
                <ReactMarkdown remarkPlugins={[remarkGfm]}>
                  {explanations[currentSubtopic.id] || 'Loading...'}
                </ReactMarkdown>
              </div>
            </div>

            <div className="rounded-lg border border-neutral-800 bg-neutral-900/50 p-6 md:p-8">
              <h3 className="mb-6 text-2xl font-bold tracking-tight">
                Mastery Check
              </h3>
              <QuizPanel
                key={currentSubtopic.id}
                questions={currentSubtopic.questions}
                onPassed={async () => {
                  try {
                    const res = await fetch('/api/mastery', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ subtopicId: currentSubtopic.id }),
                    });
                    if (!res.ok)
                      throw new Error((await res.json()).error || 'HTTP');
                    // Unlock next subtopic locally
                    const idx = ui.getState().currentIndex;
                    const next = Math.min(
                      idx + 1,
                      initial.subtopics.length - 1
                    );
                    ui.setState({
                      currentIndex: next,
                      unlockedIndex: Math.max(
                        ui.getState().unlockedIndex,
                        next
                      ),
                    });
                  } catch (e) {
                    // silent
                  }
                }}
              />
            </div>
          </div>
        ) : (
          <div className="flex h-full min-h-[60vh] items-center justify-center rounded-lg border-2 border-dashed border-neutral-800 text-neutral-500">
            <p>Select a subtopic to begin</p>
          </div>
        )}
      </main>

      {/* Right: AI Tutor */}
      <aside className="sticky top-24 h-[calc(100vh-8rem)] self-start lg:col-span-3">
        <ChatPanel documentContent={initial.originalContent} />
      </aside>
    </div>
  );
}

function QuizPanel({
  questions,
  onPassed,
}: {
  questions: QuizQuestion[];
  onPassed: () => void;
}) {
  const [answers, setAnswers] = useState<number[]>([]);
  const [revealed, setRevealed] = useState(false);

  const setAns = (qIndex: number, ansIndex: number) => {
    const next = [...answers];
    next[qIndex] = ansIndex;
    setAnswers(next);
  };

  const check = () => {
    setRevealed(true);
    const allCorrect = questions.every((q, i) => answers[i] === q.answerIndex);
    if (allCorrect) setTimeout(onPassed, 900);
  };

  useEffect(() => {
    setAnswers([]);
    setRevealed(false);
  }, [questions.map((q) => q.id).join('|')]);

  if (!questions || questions.length === 0) {
    return (
      <p className="text-sm text-neutral-400">
        No quiz questions for this subtopic.
      </p>
    );
  }

  return (
    <div className="space-y-4">
      <ul className="space-y-6">
        {questions.map((q, i) => (
          <li key={q.id} className="space-y-3">
            <div className="font-medium text-neutral-200">{q.prompt}</div>
            <div className="grid gap-2">
              {q.options.map((o, j) => {
                const isSelected = answers[i] === j;
                const isCorrect = revealed && j === q.answerIndex;
                const isIncorrect =
                  revealed && isSelected && j !== q.answerIndex;
                const buttonClass = `rounded-md border p-3 text-left transition-all text-sm ${
                  isCorrect
                    ? 'border-green-500 bg-green-900/30'
                    : isIncorrect
                      ? 'border-red-500 bg-red-900/30'
                      : isSelected
                        ? 'border-blue-500 bg-blue-900/20'
                        : 'border-neutral-700 hover:bg-neutral-800'
                }`;
                return (
                  <button
                    key={j}
                    onClick={() => setAns(i, j)}
                    className={buttonClass}
                    disabled={revealed}
                  >
                    {o}
                  </button>
                );
              })}
            </div>
            {revealed && q.explanation && (
              <div className="mt-4 border-t border-neutral-800 pt-3 text-sm text-neutral-400">
                {q.explanation}
              </div>
            )}
          </li>
        ))}
      </ul>
      <div className="flex items-center gap-4 pt-4">
        <button
          onClick={check}
          disabled={revealed || questions.length === 0}
          className="rounded-md bg-white px-5 py-2 font-semibold text-black disabled:opacity-50"
        >
          Check Answer
        </button>
      </div>
    </div>
  );
}
